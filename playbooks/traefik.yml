---
- name: "Traefik management"
  hosts: "cluster_dmz"
  become: true
  gather_facts: true
  # vars:
  #   traefik_version: "3.3.2"
  #   ports_exposed: []
  #   domain: "local"
  #   acme_provider: ""
  #   acme_tokens: {}
  tasks:
    # +------------------------------------+
    # |            INSTALLATION            |
    # +------------------------------------+

    - name: "Traefik | Populate the service facts"
      ansible.builtin.service_facts: {}
      tags: ["install", "traefik-install", "uninstall", "traefik-uninstall"]

    - name: "Traefik | Create the directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"
      loop: ["/etc/systemd/system/traefik.service.d", "/etc/traefik"]
      tags: ["install", "traefik-install"]

    - name: "Traefik | Download the binary"
      ansible.builtin.unarchive:
        src: "https://github.com/traefik/traefik/releases/download/v{{ version|default('3.3.2') }}/traefik_v{{ version|default('3.3.2') }}_linux_{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}.tar.gz"  # yamllint disable-line rule:line-length
        dest: "/etc/traefik"
        remote_src: true
        creates: "/etc/traefik/traefik"
        owner: "root"
        group: "root"
        mode: "0500"
      tags: ["install", "traefik-install"]

    - name: "Traefik | Configure the server (static)"
      ansible.builtin.copy:
        dest: "/etc/traefik/traefik.yml"
        owner: "root"
        group: "root"
        mode: "0400"
        # yamllint disable rule:indentation
        content: |-
          ---
          accesslog:
            format: "common"
            filepath: "/data/access.log"
          api:
            dashboard: true
            insecure: true
          {% if acme_provider|default('')|length > 0 and domain|default('')|length > 0 %}
          certificatesResolvers:
            letsencrypt:
              acme:
                email: "acme@{{ domain }}"
                storage: "/etc/traefik/certificates.json"
                caServer: "https://acme-v02.api.letsencrypt.org/directory"
                certificatesDuration: 8760
                preferredChain: "ISRG Root X1"
                keyType: "RSA4096"
                dnsChallenge:
                  delayBeforeCheck: 0
                  resolvers: ["1.1.1.1:53", "8.8.8.8:53"]
                  provider: "{{ acme_provider }}"
          {% endif %}
          entryPoints:
            dns-tcp:   { address: ":53/tcp" }
            dns-udp:   { address: ":53/udp" }
            wireguard: { address: ":51820/udp" }
            http:
              address: ":80/tcp"
              asDefault: true
              forwardedHeaders: { trustedIPs: ["10.0.0.0/8", "127.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"] }
              proxyProtocol:    { trustedIPs: ["10.0.0.0/8", "127.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"] }
              http: { redirections: { entryPoint: { to: "https", scheme: "https" } } }
            https:
              address: ":443/tcp"
              forwardedHeaders: { trustedIPs: ["10.0.0.0/8", "127.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"] }
              proxyProtocol:    { trustedIPs: ["10.0.0.0/8", "127.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"] }
          {% if acme_provider|default('')|length > 0 and domain|default('')|length > 0 %}
              http:
                tls:
                  certResolver: "letsencrypt"
                  domains: [ { main: "{{ domain }}", sans: "*.{{ domain }}" } ]
          {% endif %}
          global:
            checkNewVersion: true
            sendAnonymousUsage: false
          log:
            level: "DEBUG"
          ping:
            entrypoint: "https"
          providers:
          {% if 'consul.service' in ansible_facts.services %}
            consulCatalog:
              endpoint: { address: "127.0.0.1:8500", scheme: "http" }
              connectAware: true
              connectByDefault: false
              exposedByDefault: false
              prefix: "traefik"
              watch: true
          {% elif 'nomad.service' in ansible_facts.services %}
            nomad:
              endpoint: { address: "http://127.0.0.1:4646" }
              exposedByDefault: false
              prefix: "traefik"
              watch: true
          {% else %}
            docker:
              endpoint: "unix:///var/run/docker.sock"
              exposedByDefault: false
              network: "traefik"
              watch: true
          {% endif %}
            file:
              filename: "/etc/traefik/dynamic.yml"
              watch: true
          ...
        # yamllint enable rule:indentation
      tags: ["install", "traefik-install"]

    - name: "Traefik | Configure the server (dynamic)"
      ansible.builtin.copy:
        dest: "/etc/traefik/dynamic.yml"
        owner: "root"
        group: "root"
        mode: "0400"
        # yamllint disable rule:indentation
        content: |-
          ---
          http:
            routers:
          {% if 'nomad.service' in ansible_facts.services %}
              nomad:
                rule: "Host(`cluster.{{ domain|default('local') }}`)"
                entrypoints: ["http", "https"]
                service: "nomad@file"
          {% endif %}
          {% if 'nomad.service' in ansible_facts.services %}
              consul:
                rule: "Host(`mesh.{{ domain|default('local') }}`)"
                entrypoints: ["http", "https"]
                service: "consul@file"
          {% endif %}
            services:
          {% if 'nomad.service' in ansible_facts.services %}
              nomad:
                loadBalancer:
                  servers: [ { url: "http://127.0.0.1:4646/"} ]
          {% endif %}
          {% if 'consul.service' in ansible_facts.services %}
              consul:
                loadBalancer:
                  servers: [ { url: "http://127.0.0.1:8500/"} ]
          {% endif %}
            middlewares:
              all:
                chain:
                  middlewares:
                    - compress@file
                    - jokes@file
                    - security@file
              compression:
                compress:
                  minResponseBodyBytes: 1024
                  excludedContentTypes: ["text/event-stream"]
              https-only:
                chain:
                  middlewares:
                    - https-redirect@file
                    - hsts@file
              https-redirect:
                redirectScheme:
                  port: 443
                  scheme: https
                  permanent: true
              hsts:
                headers:
                  forceSTSHeader: true
                  stsPreload: true
                  stsSeconds: 315360000
                  stsIncludeSubdomains: true
              jokes:
                headers:
                  customResponseHeaders:
                    Server: "'; DROP TABLE users; -- --"
                    X-PoweredBy: Pumas, unicorns and rainbows
                    X-NaNaNaNaNaNaNaNa: Batman!
                    X-Clacks-Overhead: GNU K.F.
              security-headers:
                headers:
                  browserXssFilter: true                          # Prevent reflected XSS attacks
                  contentTypeNosniff: true                        # Prevent browsers from trying to guess a MIME type
                  frameDeny: true                                 # Prevent clickjacking attacks
                  isDevelopment: false                            # Always act as if the app is in production
                  referrerPolicy: "no-referrer"                   # Hide the Referer header
                  customResponseHeaders:                          # Prevent more things...
                    Cross-Origin-Embedder-Policy: "require-corp"
                    Cross-Origin-Opener-Policy: "same-origin"
                    Cross-Origin-Resource-Policy: "same-site"
                    X-DNS-Prefetch-Control: "off"
                  permissionsPolicy: "bluetooth=(), camera=(), geolocation=(), microphone=()"
              security:
                chain:
                  middlewares:
                    - security-headers@file
                    - https-only@file
          tls:
            options:
              default:
                minVersion: VersionTLS12
                sniStrict: true
                cipherSuites:
                  - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
                  - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
                  - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
                  - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
                  - TLS_FALLBACK_SCSV # RFC 7507
                curvePreferences:
                  - secp521r1
                  - secp384r1
          ...
        # yamllint enable rule:indentation
      tags: ["install", "traefik-install"]

    - name: "Traefik | Create the service file"
      ansible.builtin.copy:
        dest: "/usr/lib/systemd/system/traefik.service"
        owner: "root"
        group: "root"
        mode: "0600"
        # yamllint disable rule:indentation
        content: |-
          [Unit]
          Description=Traefik
          After=network.target
          [Service]
          ExecStart=/etc/traefik/traefik --configFile=/etc/traefik/traefik.yml
          Restart=always
          RestartSec=5
          [Install]
          WantedBy=multi-user.target
        # yamllint enable rule:indentation
      tags: ["install", "traefik-install"]

    - name: "Traefik | Create the environment variables service file"
      ansible.builtin.copy:
        dest: "/etc/systemd/system/traefik.service.d/traefik.conf"
        owner: "root"
        group: "root"
        mode: "0600"
        # yamllint disable rule:indentation
        content: |-
          [Service]
          {% for key, value in acme_tokens.items() -%}
          Environment="{{ key }}={{ value }}"
          {% endfor %}
        # yamllint enable rule:indentation
      when: "acme_tokens|default({})|length > 0"
      tags: ["install", "traefik-install"]

    - name: "Traefik | Restart the service"
      ansible.builtin.service:
        name: "traefik"
        state: "restarted"
        enabled: true
        daemon_reload: true
      tags: ["install", "traefik-install"]

    - name: "Traefik | Open the firewall"
      ansible.builtin.firewalld:
        immediate: true
        permanent: true
        port: "{{ item.1 }}"
        state: "{{ 'enabled' if item.0 == 'internal' or item.1 in ports_exposed|default([]) else 'disabled' }}"
        zone: "{{ item.0 }}"
      loop: "{{ ['dmz', 'internal'] | product(['80/tcp', '443/tcp', '53/tcp', '53/udp', '51820/udp']) | list }}"
      when:
        - "'firewalld.service' in ansible_facts.services"
        - "ansible_facts.services['firewalld.service'].state == 'running'"
      tags: ["install", "traefik-install"]

    # +------------------------------------+
    # |           UNINSTALLATION           |
    # +------------------------------------+

    - name: "Traefik | Close the firewall"
      ansible.builtin.firewalld:
        immediate: true
        permanent: true
        port: "{{ item.1 }}"
        state: "disabled"
        zone: "{{ item.0 }}"
      loop: "{{ ['dmz', 'internal'] | product(['80/tcp', '443/tcp', '53/tcp', '53/udp', '51820/udp']) | list }}"
      when:
        - "'firewalld.service' in ansible_facts.services"
        - "ansible_facts.services['firewalld.service'].state == 'running'"
      tags: ["uninstall", "traefik-uninstall"]

    - name: "Traefik | Stop the service"
      ansible.builtin.service:
        name: "traefik"
        state: "stopped"
        enabled: false
      when: "'traefik.service' in ansible_facts.services"
      tags: ["uninstall", "traefik-uninstall"]

    - name: "Traefik | Remove the files and directories"
      ansible.builtin.file:
        name: "{{ item }}"
        state: "absent"
      loop:
        - "/etc/systemd/system/traefik.service"
        - "/etc/systemd/system/traefik.service.d"
        - "/etc/systemd/system/multi-user.target.wants/traefik.service"
        - "/etc/traefik"
        - "/var/lib/systemd/system/traefik.service"
      tags: ["uninstall", "nomad-uninstall"]
...
