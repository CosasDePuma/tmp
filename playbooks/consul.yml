---
- name: "Consul management"
  hosts: "cluster"
  become: true
  gather_facts: true
  # vars:
  #   consul_exposed: false
  tasks:
    # +------------------------------------+
    # |            INSTALLATION            |
    # +------------------------------------+

    - name: "Consul | Add the APT repository key"
      ansible.builtin.get_url:
        url: "https://apt.releases.hashicorp.com/gpg"
        dest: "/etc/apt/trusted.gpg.d/hashicorp.asc"
        mode: "0644"
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["install", "consul-install"]

    - name: "Consul | Add the APT repository"
      ansible.builtin.apt_repository:
        filename: "hashicorp"
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/trusted.gpg.d/hashicorp.asc] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"  # yamllint disable-line rule:line-length
        state: "present"
        update_cache: true
        install_python_apt: true
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["install", "consul-install"]

    - name: "Consul | Install the packages using APT"
      ansible.builtin.apt:
        name: ["consul", "consul-cni"]
        state: "latest"
        update_cache: true
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["install", "consul-install"]

    - name: "Consul | Install the DNF dependencies"
      ansible.builtin.dnf:
        name: ["dnf-plugins-core"]
        state: "latest"
        update_cache: true
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["install", "consul-install"]

    - name: "Consul | Add the Hashicorp repository"
      ansible.builtin.shell:
        cmd: "dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo"
        creates: "/etc/yum.repos.d/hashicorp.repo"
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["install", "consul-install"]

    - name: "Consul | Install the packages using DNF"
      ansible.builtin.dnf:
        name: ["consul", "consul-cni"]
        state: "latest"
        update_cache: true
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["install", "consul-install"]

    - name: "Consul | Create the directories"
      ansible.builtin.file:
        path: "/etc/consul.d/storage"
        state: "directory"
        owner: "consul"
        group: "consul"
        mode: "0750"
      tags: ["install", "consul-install"]

    - name: "Consul | Generate a random encryption key"
      ansible.builtin.set_fact:
        consul_encryption_key: "{{ lookup('ansible.builtin.password', '/dev/null', seed=inventory_hostname, chars=['ascii_lowercase', 'digits'], length=32) }}"  # yamllint disable-line rule:line-length
      run_once: true
      tags: ["install", "consul-install"]

    - name: "Consul | Configure the server"
      ansible.builtin.copy:
        dest: "/etc/consul.d/consul.hcl"
        owner: "consul"
        group: "consul"
        mode: "0640"
        # yamllint disable rule:indentation
        content: |-
          # +--------------------+
          # |      GENERAL       |
          # +--------------------+
          node_name  = "{{ ansible_hostname }}"
          datacenter = "lab"
          data_dir   = "/etc/consul.d/storage"
          retry_join = [{{ groups['cluster_servers'] | reject('equalto', inventory_hostname) | map('tojson') | join(' ,') }}]
          bind_addr  = "{{ ansible_default_ipv4.address }}"
          {% if 'cluster_servers' in group_names %}
          # +--------------------+
          # |       SERVER       |
          # +--------------------+
          client_addr      = "127.0.0.1"
          server           = true
          bootstrap_expect = 1
          ports {
            dns = 8600
            http = {{ 8500 if 'cluster_servers' in group_names else -1 }}
            https = -1
            grpc = 8502
            grpc_tls = -1
            serf_lan = 8301
            serf_wan = -1
            server = 8300
          }
          # +--------------------+
          # |       WEBUI        |
          # +--------------------+
          ui_config {
            enabled = true
          }
          {% endif %}
          # +--------------------+
          # |        LOGS        |
          # +--------------------+
          log_level = "INFO"
          log_file  = "/etc/consul.d/consul.log"
          # +--------------------+
          # |      CONNECT       |
          # +--------------------+
          connect {
            enabled = true
          }
          # +--------------------+
          # |      SECURITY      |
          # +--------------------+
          encrypt              = "{{ consul_encryption_key | b64encode }}"
          enable_script_checks = true
          disable_update_check = true
          leave_on_terminate   = true
        # yamllint enable rule:indentation
      tags: ["install", "consul-install"]

    - name: "Consul | Fix the service"
      ansible.builtin.lineinfile:
        dest: "/usr/lib/systemd/system/consul.service"
        regexp: "^Type="
        line: "Type=simple"
      tags: ["install", "consul-install"]

    - name: "Consul | Restart the service"
      ansible.builtin.service:
        name: "consul"
        state: "restarted"
        enabled: true
        daemon_reload: true
      tags: ["install", "consul-install"]

    - name: "Consul | Populate the service facts"
      ansible.builtin.service_facts: {}
      tags: ["install", "consul-install", "uninstall", "consul-uninstall"]

    - name: "Consul | Open the firewall"
      ansible.posix.firewalld:
        immediate: true
        permanent: true
        port: "{{ item.1 }}"
        state: "enabled"
        zone: "{{ item.0 }}"
      loop: "{{ (['dmz', 'internal'] if consul_exposed|default('false')|bool else ['internal']) | product(['8300/tcp', '8301/tcp', '8301/udp']) | list }}"  # yamllint disable-line rule:line-length
      when:
        - "'firewalld.service' in ansible_facts.services"
        - "ansible_facts.services['firewalld.service'].state == 'running'"
      tags: ["install", "consul-install"]

    # +------------------------------------+
    # |           UNINSTALLATION           |
    # +------------------------------------+
    - name: "Consul | Close the firewall"
      ansible.posix.firewalld:
        immediate: true
        permanent: true
        port: "{{ item.1 }}"
        state: "disabled"
        zone: "{{ item.0 }}"
      loop: "{{ ['dmz', 'internal'] | product(['8300/tcp', '8301/tcp', '8301/udp', '8500/tcp']) | list }}"
      when:
        - "'firewalld.service' in ansible_facts.services"
        - "ansible_facts.services['firewalld.service'].state == 'running'"
      tags: ["uninstall", "consul-uninstall"]

    - name: "Consul | Stop the service"
      ansible.builtin.service:
        name: "consul"
        state: "stopped"
        enabled: false
      when: "'consul.service' in ansible_facts.services"
      tags: ["uninstall", "consul-uninstall"]

    - name: "Consul | Uninstall the packages using APT"
      ansible.builtin.apt:
        name: ["consul", "consul-cni"]
        state: "absent"
        autoclean: true
        autoremove: true
        purge: true
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["uninstall", "consul-uninstall"]

    - name: "Consul | Uninstall the packages using DNF"
      ansible.builtin.dnf:
        name: ["consul", "consul-cni"]
        state: "absent"
        autoremove: true
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["uninstall", "consul-uninstall"]

    - name: "Consul | Remove the files and directories"
      ansible.builtin.file:
        name: "{{ item }}"
        state: "absent"
      loop:
        - "/etc/apt/trusted.gpg.d/hashicorp.asc"
        - "/etc/apt/sources.list.d/hashicorp.list"
        - "/etc/consul.d"
        - "/etc/systemd/system/consul.service"
        - "/etc/systemd/system/multi-user.target.wants/consul.service"
        - "/etc/yum.repos.d/hashicorp.repo"
        - "/opt/consul"
        - "/opt/cni"
        - "/var/lib/systemd/system/consul.service"
      tags: ["uninstall", "consul-uninstall"]

    - name: "Consul | Reload the systemd daemon"
      ansible.builtin.systemd:
        daemon_reload: true
      when: "ansible_service_mgr == 'systemd'"
      tags: ["uninstall", "consul-uninstall"]
...
