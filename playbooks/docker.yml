---
- name: "Docker management"
  hosts: "cluster"
  become: true
  gather_facts: true
  tasks:
    # +------------------------------------+
    # |            INSTALLATION            |
    # +------------------------------------+

    - name: "Docker | Add the APT repository key"
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/{{ ansible_distribution_release|lower }}/gpg"
        dest: "/etc/apt/keyrings/docker-ce.asc"
        mode: "0644"
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["install", "docker-install"]

    - name: "Docker | Add the APT repository"
      ansible.builtin.apt_repository:
        filename: "docker-ce"
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-ce.asc] https://download.docker.com/linux/{{ ansible_distribution_release|lower }} {{ ansible_distribution_release|lower }} stable"  # yamllint disable-line rule:line-length
        state: "present"
        update_cache: true
        install_python_apt: true
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["install", "docker-install"]

    - name: "Docker | Install the packages using APT"
      ansible.builtin.apt:
        name: ["containerd.io", "docker-ce", "docker-ce-cli", "docker-compose-plugin", "python3-pip"]
        state: "latest"
        update_cache: true
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["install", "docker-install"]

    - name: "Docker | Install the DNF dependencies"
      ansible.builtin.dnf:
        name: ["dnf-plugins-core"]
        state: "latest"
        update_cache: true
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["install", "docker-install"]

    - name: "Docker | Add the Docker-CE repository"
      ansible.builtin.shell:
        cmd: "dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"
        creates: "/etc/yum.repos.d/docker-ce.repo"
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["install", "docker-install"]

    - name: "Docker | Install the packages using DNF"
      ansible.builtin.dnf:
        name: ["containerd.io", "docker-ce", "docker-ce-cli", "docker-compose-plugin", "python3-pip"]
        state: "latest"
        update_cache: true
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["install", "docker-install"]

    - name: "Docker | Install the Python libraries"
      ansible.builtin.pip:
        name: "{{ item }}"
        state: "present"
      loop: ["cryptography", "docker", "jsondiff"]
      tags: ["install"]

    - name: "Docker | Restart the service"
      ansible.builtin.service:
        name: "docker"
        state: "restarted"
        enabled: true
        daemon_reload: true
      tags: ["install", "docker-install"]

    # +------------------------------------+
    # |           UNINSTALLATION           |
    # +------------------------------------+

    - name: "Docker | Populate the service facts"
      ansible.builtin.service_facts: {}
      tags: ["uninstall", "docker-uninstall"]

    - name: "Docker | Start the service"
      ansible.builtin.service:
        name: "docker"
        state: "started"
        enabled: true
        daemon_reload: true
      when: "'docker.service' in ansible_facts.services"
      tags: ["uninstall", "docker-uninstall"]

    - name: "Docker | Prune everything"
      community.docker.docker_prune:
        containers: true
        images: true
        images_filters:
          dangling: false
        networks: true
        volumes: true
        builder_cache: true
      when: "'docker.service' in ansible_facts.services"
      tags: ["uninstall", "docker-uninstall"]
        
    - name: "Docker | Stop the service"
      ansible.builtin.service:
        name: "docker"
        state: "stopped"
        enabled: false
      when: "'docker.service' in ansible_facts.services"
      tags: ["uninstall", "docker-uninstall"]

    - name: "Docker | Uninstall the packages using APT"
      ansible.builtin.apt:
        name: ["containerd.io", "docker-ce", "docker-ce-cli", "docker-compose-plugin"]
        state: "absent"
        autoclean: true
        autoremove: true
        purge: true
      when: "ansible_pkg_mgr == 'apt'"
      tags: ["uninstall", "docker-uninstall"]

    - name: "Docker | Uninstall the packages using DNF"
      ansible.builtin.dnf:
        name: ["containerd.io", "docker-ce", "docker-ce-cli", "docker-compose-plugin"]
        state: "absent"
        autoremove: true
      when: "ansible_pkg_mgr == 'dnf'"
      tags: ["uninstall", "docker-uninstall"]

    - name: "Docker | Remove the files and directories"
      ansible.builtin.file:
        name: "{{ item }}"
        state: "absent"
      loop:
        - "/etc/apt/keyrings/docker-ce.asc"
        - "/etc/apt/trusted.gpg.d/docker-ce.asc"
        - "/etc/apt/sources.list.d/docker-ce.list"
        - "/etc/systemd/system/docker.service"
        - "/etc/systemd/system/multi-user.target.wants/docker.service"
        - "/etc/yum.repos.d/docker-ce.repo"
        - "/opt/containerd"
        - "/run/docker"
        - "/run/docker.sock"
        - "/var/lib/docker"
        - "/var/lib/systemd/system/docker.service"
      tags: ["uninstall", "docker-uninstall"]

    - name: "Docker | Reload the systemd daemon"
      ansible.builtin.systemd:
        daemon_reload: true
      when: "ansible_service_mgr == 'systemd'"
      tags: ["uninstall", "docker-uninstall"]
...
